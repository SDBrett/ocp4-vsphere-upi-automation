---
- hosts: localhost
  vars: 
    bootstrapContent : "{{ lookup('file', '{{ playbook_dir }}/install-dir/append-bootstrap.64') }}"
    masterContent : "{{ lookup('file', '{{ playbook_dir }}/install-dir/master.64') }}"
    workerContent : "{{ lookup('file', '{{ playbook_dir }}/install-dir/worker.64') }}"
    templateName : rhcos-4.3.0-x86_64-vmware
    folder : "/{{ vcenter.datacenter }}/vm/openshift/{{ config.clusterName }}"
    datastore: "{{ vcenter.datastore }}"
    govc_file: "/usr/local/bin/govc"
  tasks:
    - name: "Bootstrap base64"
      debug:
        msg: "{{ bootstrapContent }}" 
    - name: "Master base64"
      debug:
        msg: "{{ masterContent }}" 
    - name: "Worker base64 "
      debug:
        msg: "{{ workerContent }}" 

    - name: Create bootstrap VM from the template
      vmware_guest:
        hostname: "{{ vcenter.ip }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        datacenter: "{{ vcenter.datacenter }}"
        cluster: "{{ vcenter.cluster }}"
        validate_certs: no
        folder: "{{ folder }}"
        name: bootstrap
        state: poweredoff
        template: "{{ templateName }}"
        disk:
        - size_gb: 16 
          type: thin
          datastore: "{{ datastore }}"
        hardware:
          memory_mb: 8192
          num_cpus: 4
          memory_reservation_lock: True
        networks:
        - name: "{{ vcenter.vm_network_1 }}"
        wait_for_ip_address: no 
        customvalues:
          - key: guestinfo.ignition.config.data
            value: "{{ bootstrapContent }}"
          - key: guestinfo.ignition.config.data.encoding
            value: base64
          - key: disk.EnableUUID
            value: "TRUE"
          - key: timezone
            value: "UTC"
          - key: hwclockUTC
            value: "TRUE"

    - name: Create master VMs from ther template
      vmware_guest:
        hostname: "{{ vcenter.ip }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        datacenter: "{{ vcenter.datacenter }}"
        cluster: "{{ vcenter.cluster }}"
        validate_certs: no
        folder: "{{ folder }}"
        name: "{{ item.name }}"
        state: poweredoff
        template: "{{ item.template }}"
        disk:
        - size_gb: 16
          type: thin
          datastore: "{{ datastore }}" 
        hardware:
          memory_mb: 16384
          num_cpus: 4
          memory_reservation_lock: True
        networks:
        - name: "{{ vcenter.vm_network_1 }}"
        wait_for_ip_address: no
        customvalues:
         - key: guestinfo.ignition.config.data
           value: "{{ masterContent }}"
         - key: guestinfo.ignition.config.data.encoding
           value: base64
         - key: disk.EnableUUID
           value: "TRUE"
         - key: timezone
           value: "UTC"
         - key: hwclockUTC
           value: "TRUE"
      loop:
        - { name : "master0", template: "{{ templateName }}" }
        - { name : "master1", template: "{{ templateName }}" }
        - { name : "master2", template: "{{ templateName }}" }

    - name: Create worker VMs from the template
      vmware_guest:
        hostname: "{{ vcenter.ip }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        datacenter: "{{ vcenter.datacenter }}"
        cluster: "{{ vcenter.cluster }}"
        validate_certs: no
        folder: "{{ folder }}"
        name: "{{ item.name }}"
        state: poweredoff
        template: "{{ item.template }}"
        disk:
        - size_gb: 16
          type: thin
          datastore: "{{ datastore }}"
        hardware:
          memory_mb: 32768
          num_cpus: 8
          memory_reservation_lock: True
        networks:
        - name: "{{ vcenter.vm_network_1 }}"
        wait_for_ip_address: no
        customvalues:
         - key: guestinfo.ignition.config.data
           value: "{{ workerContent }}"
         - key: guestinfo.ignition.config.data.encoding
           value: base64
         - key: disk.EnableUUID
           value: "TRUE"
         - key: timezone
           value: "UTC"
         - key: hwclockUTC
           value: "TRUE"
      loop:
        - { name : "worker0", template: "{{ templateName }}" }
        - { name : "worker1", template: "{{ templateName }}" }
        - { name : "worker2", template: "{{ templateName }}" }
      when: enable_multus|bool == False

    - name: Create worker VMs from the template using Multus
      vmware_guest:
        hostname: "{{ vcenter.ip }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        datacenter: "{{ vcenter.datacenter }}"
        cluster: "{{ vcenter.cluster }}"
        validate_certs: no
        folder: "{{ folder }}"
        name: "{{ item.name }}"
        state: poweredoff
        template: "{{ item.template }}"
        disk:
        - size_gb: 16
          type: thin
          datastore: "{{ datastore }}"
        hardware:
          memory_mb: 32768
          num_cpus: 8
          memory_reservation_lock: True
        networks:
        - name: "{{ vcenter.vm_network_1 }}"
        - name: "{{ vcenter.vm_network_2 }}"
        - name: "{{ vcenter.vm_network_3 }}"
        wait_for_ip_address: no
        customvalues:
         - key: guestinfo.ignition.config.data
           value: "{{ workerContent }}"
         - key: guestinfo.ignition.config.data.encoding
           value: base64
         - key: disk.EnableUUID
           value: "TRUE"
         - key: timezone
           value: "UTC"
         - key: hwclockUTC
           value: "TRUE"
      loop:
        - { name : "worker0", template: "{{ templateName }}" }
        - { name : "worker1", template: "{{ templateName }}" }
        - { name : "worker2", template: "{{ templateName }}" }
      when: enable_multus|bool == True

    - name: Create Storage VMs from the template
      vmware_guest:
        hostname: "{{ vcenter.ip }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        datacenter: "{{ vcenter.datacenter }}"
        cluster: "{{ vcenter.cluster }}"
        validate_certs: no
        folder: "{{ folder }}"
        name: "{{ item.name }}"
        state: poweredoff
        template: "{{ item.template }}"
        disk:
        - size_gb: 16
          type: thin
          datastore: "{{ datastore }}"
        hardware:
          memory_mb: 67584
          num_cpus: 16
          memory_reservation_lock: True
        networks:
        - name: "{{ vcenter.vm_network_1 }}"
        wait_for_ip_address: no
        customvalues:
         - key: guestinfo.ignition.config.data
           value: "{{ workerContent }}"
         - key: guestinfo.ignition.config.data.encoding
           value: base64
         - key: disk.EnableUUID
           value: "TRUE"
         - key: timezone
           value: "UTC"
         - key: hwclockUTC
           value: "TRUE"
      loop:
        - { name : "storage0", template: "{{ templateName }}" }
        - { name : "storage1", template: "{{ templateName }}" }
        - { name : "storage2", template: "{{ templateName }}" }
      when: enable_ocs_storage|bool == True

    - name: Update Mac Address Core Cluster
      command: "{{ govc_file }} vm.network.change -net.address {{ item.mac }} -vm={{ item.name }} ethernet-0"
      environment:
        GOVC_HOST: "{{ vcenter.ip }}"
        GOVC_URL: "https://{{ vcenter.ip }}/sdk"
        GOVC_USERNAME: "{{ vcenter.username }}"
        GOVC_PASSWORD: "{{ vcenter.password }}"
        GOVC_INSECURE: 1
        GOVC_DATASTORE: "{{ vcenter.datastore }}"
        GOVC_DATACENTER: "{{ vcenter.datacenter }}"
        GOVC_CLUSTER: "{{ vcenter.cluster }}"
        GOVC_NETWORK: "{{ vcenter.vm_network_1 }}"
      loop:
        - { name : "bootstrap", mac: "{{ config.bootstrapmac }}" }
        - { name : "master0", mac: "{{ config.master0mac }}" }
        - { name : "master1", mac: "{{ config.master1mac }}" }
        - { name : "master2", mac: "{{ config.master2mac }}" }
        - { name : "worker0", mac: "{{ config.worker0mac }}" }
        - { name : "worker1", mac: "{{ config.worker1mac }}" }
        - { name : "worker2", mac: "{{ config.worker2mac }}" }
      retries: 3
      delay: 3
      register: result
      until: result.rc == 0
  
    - name: Update Mac Address Store Nodes
      command: "{{ govc_file }} vm.network.change -net.address {{ item.mac }} -vm={{ item.name }} ethernet-0"
      environment:
        GOVC_HOST: "{{ vcenter.ip }}"
        GOVC_URL: "https://{{ vcenter.ip }}/sdk"
        GOVC_USERNAME: "{{ vcenter.username }}"
        GOVC_PASSWORD: "{{ vcenter.password }}"
        GOVC_INSECURE: 1
        GOVC_DATASTORE: "{{ vcenter.datastore }}"
        GOVC_DATACENTER: "{{ vcenter.datacenter }}"
        GOVC_CLUSTER: "{{ vcenter.cluster }}"
        GOVC_NETWORK: "{{ vcenter.vm_network_1 }}"
      loop:
        - { name : "storage0", mac: "{{ config.storage0mac }}" }
        - { name : "storage1", mac: "{{ config.storage1mac }}" }
        - { name : "storage2", mac: "{{ config.storage2mac }}" }
      retries: 3
      delay: 3
      register: result
      until: result.rc == 0    
      when: enable_ocs_storage|bool == True

    - name: Update CPU latencySensitivity Core Cluster
      command: "{{ govc_file }} vm.change -vm={{ item.name }} -e sched.cpu.latencySensitivity=high"
      environment:
        GOVC_HOST: "{{ vcenter.ip }}"
        GOVC_URL: "https://{{ vcenter.ip }}/sdk"
        GOVC_USERNAME: "{{ vcenter.username }}"
        GOVC_PASSWORD: "{{ vcenter.password }}"
        GOVC_INSECURE: 1
        GOVC_DATASTORE: "{{ vcenter.datastore }}"
        GOVC_DATACENTER: "{{ vcenter.datacenter }}"
        GOVC_CLUSTER: "{{ vcenter.cluster }}"
        GOVC_NETWORK: "{{ vcenter.vm_network_1 }}"
      loop:
        - { name : "bootstrap" }
        - { name : "master0" }
        - { name : "master1" } 
        - { name : "master2" }
        - { name : "worker0" }
        - { name : "worker1" }
        - { name : "worker2" }
      retries: 3
      delay: 3
      register: result
      until: result.rc == 0

    - name: Update CPU latencySensitivity Core Cluster
      command: "{{ govc_file }} vm.change -vm={{ item.name }} -e sched.cpu.latencySensitivity=high"
      environment:
        GOVC_HOST: "{{ vcenter.ip }}"
        GOVC_URL: "https://{{ vcenter.ip }}/sdk"
        GOVC_USERNAME: "{{ vcenter.username }}"
        GOVC_PASSWORD: "{{ vcenter.password }}"
        GOVC_INSECURE: 1
        GOVC_DATASTORE: "{{ vcenter.datastore }}"
        GOVC_DATACENTER: "{{ vcenter.datacenter }}"
        GOVC_CLUSTER: "{{ vcenter.cluster }}"
        GOVC_NETWORK: "{{ vcenter.vm_network_1 }}"
      loop:
        - { name : "storage0" }
        - { name : "storage1" }
        - { name : "storage2" }
      retries: 3
      delay: 3
      register: result
      until: result.rc == 0      
      when: enable_ocs_storage|bool == True

    - name: Start all Core Cluster VM's
      vmware_guest:
        hostname: "{{ vcenter.ip }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        datacenter: "{{ vcenter.datacenter }}"
        validate_certs: no
        folder: "{{ folder }}"
        name: "{{ item.name }}"
        state: poweredon
      loop:
        - { name : "bootstrap" }
        - { name : "master0" }
        - { name : "master1" }
        - { name : "master2" }
        - { name : "worker0" }
        - { name : "worker1" }
        - { name : "worker2" }

    - name: Start all Storage Cluster VM's
      vmware_guest:
          hostname: "{{ vcenter.ip }}"
          username: "{{ vcenter.username }}"
          password: "{{ vcenter.password }}"
          datacenter: "{{ vcenter.datacenter }}"
          validate_certs: no
          folder: "{{ folder }}"
          name: "{{ item.name }}"
          state: poweredon
      loop:
        - { name : "storage0" }
        - { name : "storage1" }
        - { name : "storage2" }  
      when: enable_ocs_storage|bool == True
...
